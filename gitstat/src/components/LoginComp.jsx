import React, { useState, useRef, useEffect } from 'react';
import { Button, Form, Input, Space, Typography, notification } from 'antd';
import '../styles/LoginComp.css';
import logo from '../images/github_logo.png';
import axios from 'axios';
import { useSpring, animated, useTransition } from 'react-spring';

const { Text, Link } = Typography;

const onFinishFailed = (errorInfo) => {
  console.log('Failed:', errorInfo);
};

function LoginComp() {
  const [isLogin, setIsLogin] = useState(true);
  const loginRef = useRef(null);
  const registerRef = useRef(null);
  const [height, setHeight] = useState(0);
  const [api, contextHolder] = notification.useNotification();

  const openNotification = (msg, descr) => {
    api.info({
      message: msg,
      description: descr,
      placement: 'top',
      style: {
        backgroundColor: '#2F3743',
        color: 'white',
        borderRadius: '10px',
        overflow: 'hidden',
      },
    });
  };

  const onFinishLogin = async (values) => {
    const formData = new URLSearchParams();
    formData.append('username', values.username);
    formData.append('password', values.password);
    try {
      const response = await axios.post('http://127.0.0.1:8000/token', formData, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      });
      openNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${values.username}`);
    } catch {
      openNotification('–û—à–∏–±–∫–∞', `–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å`);
    }
  };

  const onFinishRegister = async (values) => {
    const formData = {
      username: values.username,
      email: values.email,
      password: values.password,
    };
    try {
      const response = await axios.post('http://127.0.0.1:8000/register', formData, {
        headers: { 'Content-Type': 'application/json' },
      });
      openNotification('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', `–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ ${values.username}`);
    } catch {
      openNotification('–û—à–∏–±–∫–∞', `–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å`);
    }
  };

  // üîß –ú–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî –±–µ–∑ translate, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
  const transitions = useTransition(isLogin, {
    from: { opacity: 0, position: 'absolute', width: '100%' },
    enter: { opacity: 1 },
    leave: { opacity: 0 },
    config: { duration: 250 },
  });

  // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ñ–æ—Ä–º—ã
  useEffect(() => {
    const activeRef = isLogin ? loginRef : registerRef;
    const timeout = setTimeout(() => {
      if (activeRef.current) setHeight(activeRef.current.offsetHeight);
    }, 0);
    return () => clearTimeout(timeout);
  }, [isLogin]);

  const parentSpring = useSpring({
    height,
    config: { tension: 250, friction: 26 },
  });

  return (
    <animated.div
      style={{
        ...parentSpring,
        position: 'relative',
        width: 350,
        borderRadius: 16,
        backgroundColor: '#12171F',
        overflow: 'hidden',
        padding: 0,
      }}
    >
      {contextHolder}

      {transitions((style, item) =>
        item ? (
          // === –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ ===
          <animated.div ref={loginRef} style={{ ...style }}>
            <Form
              name="login"
              layout="vertical"
              style={{ color: 'white', textAlign: 'center', margin: 20 }}
              onFinish={onFinishLogin}
              onFinishFailed={onFinishFailed}
              autoComplete="off"
            >
              <img src={logo} alt="Logo" style={{ width: 60, marginBottom: 0 }} />
              <h2 style={{ color: 'white', marginBottom: 20 }}>–í–æ–π—Ç–∏ –≤ GitStat</h2>

              <Form.Item
                label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email"
                name="username"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email!' }]}
              >
                <Input />
              </Form.Item>

              <Form.Item
                label="–ü–∞—Ä–æ–ª—å"
                name="password"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!' }]}
              >
                <Input.Password />
              </Form.Item>

              <Form.Item>
                <Button type="primary" htmlType="submit" style={{ width: '100%' }}>
                  –í–æ–π—Ç–∏
                </Button>
              </Form.Item>

              <Space direction="vertical" size={2}>
                <Text style={{ color: 'white' }}>–ï—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?</Text>
                <Link onClick={() => setIsLogin(false)}>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</Link>
              </Space>
            </Form>
          </animated.div>
        ) : (
          // === –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
          <animated.div ref={registerRef} style={{ ...style }}>
            <Form
              name="register"
              layout="vertical"
              style={{ color: 'white', textAlign: 'center', margin: 20 }}
              onFinish={onFinishRegister}
              autoComplete="off"
            >
              <img src={logo} alt="Logo" style={{ width: 60, marginBottom: 0 }} />
              <h2 style={{ color: 'white', marginBottom: 20 }}>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</h2>

              <Form.Item
                label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                name="username"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' }]}
              >
                <Input />
              </Form.Item>

              <Form.Item
                label="Email"
                name="email"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ email!' }]}
              >
                <Input type="email" />
              </Form.Item>

              <Form.Item
                label="–ü–∞—Ä–æ–ª—å"
                name="password"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!' }]}
              >
                <Input.Password />
              </Form.Item>

              <Form.Item>
                <Button type="primary" htmlType="submit" style={{ width: '100%' }}>
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Button>
              </Form.Item>

              <Space direction="vertical" size={2}>
                <Text style={{ color: 'white' }}>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</Text>
                <Link onClick={() => setIsLogin(true)}>–í–æ–π—Ç–∏</Link>
              </Space>
            </Form>
          </animated.div>
        )
      )}
    </animated.div>
  );
}

export default LoginComp;
